{
  "name": "hashmap",
  "author": {
    "name": "Ariel Flesler",
    "email": "aflesler@gmail.com"
  },
  "version": "1.0.0",
  "description": "HashMap for Node JS",
  "keywords": [
    "hashmap",
    "map",
    "object",
    "array",
    "associative",
    "javascript",
    "nodejs",
    "node",
    "browser"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/flesler/hashmap"
  },
  "main": "./hashmap.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "readme": "# HashMap Class for JavaScript\r\n\r\n## Description\r\n\r\nThis project provides a `HashMap` class that works both on __NodeJS__ and the __browser__.\r\nHashMap instances __store key/value pairs__ allowing __keys of any type__.\r\n\r\nUnlike regular objects, __keys won't not be stringified__. For example numbers and strings won't be mixed, you can pass `Date`'s, `RegExp`'s, DOM Elements, anything! (even `null` and `undefined`)\r\n\r\n## Examples\r\n\r\nAssume this for all examples below\r\n\r\n\tvar map = new HashMap();\r\n\r\nIf you're using this within Node, you first need to import the class\r\n\r\n\tvar HashMap = require('hashmap').HashMap;\r\n \r\n### Basic use case\r\n\r\n\tmap.set(\"some_key\", \"some value\");\r\n\tmap.get(\"some_key\"); // --> \"some value\"\r\n \r\n### No stringification\r\n\r\n\tmap.set(\"1\", \"string one\");\r\n\tmap.set(1, \"number one\");\r\n\tmap.get(\"1\"); // --> \"string one\"\r\n\r\nA regular `Object` used as a map would yield `\"number one\"`\r\n\r\n###  Objects as keys\r\n\r\n\tvar key = {};\r\n\tvar key2 = {};\r\n\tmap.set(key, 123);\r\n\tmap.set(key2, 321);\r\n\tmap.get(key); // --> 123\r\n\r\nA regular `Object` used as a map would yield `321`\r\n\r\n###  Iterating\r\n\r\n    map.set(1, \"test 1\");\r\n    map.set(2, \"test 2\");\r\n    map.set(3, \"test 3\");\r\n    \r\n    map.forEach(function(value, key) {\r\n        console.log(key + \" : \" + value);\r\n    });\r\n\r\n[Check the tests](https://github.com/flesler/hashmap/blob/master/test/all.js) for some more real code.\r\n\r\n## TODO's\r\n\r\nThis project is in early development, so any feedback/changes are specially appreciated.\r\n\r\n* (?) Allow extending the hashing function in a AOP way or by passing a service\r\n* Fix: The hashmap will expose an enumerable expando when `Object.defineProperty` doesn't exist maybe use a different hashing approach for this case like `Array.indexOf`\r\n* Use a real test framework\r\n* Make tests work on the browser\r\n* Document the public API of HashMap's",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/flesler/hashmap/issues"
  },
  "_id": "hashmap@1.0.0",
  "dist": {
    "shasum": "a35deb74dc74a3c04628c9cbe5b1528ad2aba560"
  },
  "_from": "hashmap@",
  "_resolved": "https://registry.npmjs.org/hashmap/-/hashmap-1.0.0.tgz"
}
