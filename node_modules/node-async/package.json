{
  "author": {
    "name": "Johann du Toit",
    "email": "exxonno@gmail.com",
    "url": "http://www.johanndutoit.net"
  },
  "name": "node-async",
  "description": "Easy asynchronous programming with easy to handle results.",
  "version": "0.0.1",
  "homepage": "https://github.com/Johanndutoit/node-async",
  "repository": {
    "type": "git",
    "url": "git://github.com/Johanndutoit/node-async.git"
  },
  "main": "index.js",
  "dependencies": {
    "coffee-script": ">= 1.3.3",
    "narrow": ">= 0.0.2"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "\n# Node-Async\n\nNeeded a library that would allow me to do a series of functions and wait for the result where I could then parse and move on with all the data.\n\nSo the idea is:\n* Create a Array of functions I want executed.\n* Wait for them execute\n* Handle Results from the functions when they have been executed.\n\nBased of https://github.com/CurriculumVitae/CV-Data-Service-Client/ that I wrote to help me with http-signature requests to the server.\n\n## Installation\n \n    $ npm install node-async\n\n## Quick Start\n\n```js\nvar async_block = require('node-async');\n\nasync_block(\n\t[\n\t\t{\n\t\t\tname: 'get_twitter_feed',\n\t\t\ttask: function(params, callback) {\n\t\t\t\t// Do http request etc.\n\t\t\t\tcallback null, data_from_twitter\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tname: 'get_facebook_feed',\n\t\t\ttask: function(params, callback) {\n\t\t\t\t// Do http request etc.\n\t\t\t\tcallback null, data_from_facebook\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tname: 'perform_some_calculation',\n\t\t\ttask: function(params, callback) {\n\t\t\t\t// Do http request etc.\n\t\t\t\tcallback 'Error while performing Calculation'\n\t\t\t}\n\t\t}\n\t],\n\tfunction(results) {\n\n\t\tif(results.get_twitter_feed.result == true) {\n\t\t\tconsole.log(\"From Twitter: \" + results.get_twitter_feed.value);\n\t\t} else {\n\t\t\t// handle error\n\t\t\tconsole.log(\"Error: \" + results.get_twitter_feed.error)\n\t\t}\n\n\t\tif(results.get_facebook_feed.result == true) {\n\t\t\tconsole.log(\"From Facebook: \" + results.get_facebook_feed.value);\n\t\t} else {\n\t\t\t// handle error\n\t\t\tconsole.log(\"Error: \" + results.get_facebook_feed.error)\n\t\t}\n\n\t\tif(results.perform_some_calculation.result == true) {\n\t\t\t// Do something nice\n\t\t} else {\n\t\t\t// Handle Error\n\t\t\tconsole.log(\"Error: \" + results.perform_some_calculation.error)\n\t\t}\n\n\t}\n);\n```\n\nWill Produce:\n\n\tFrom Twitter: {some data you got}\n\tFrom Facebook: {some data you got}\n\tError: {The error we received.}\n\n## TODO:\n\n* Add some kind of timeout for the functions\n* Create a Suite of Tests\n* Add some more real world samples\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2009-2012\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Johanndutoit/node-async/issues"
  },
  "_id": "node-async@0.0.1",
  "dist": {
    "shasum": "bd109f1e7c6d32a83347dc1bf3b73458adc96d3e"
  },
  "_from": "node-async@",
  "_resolved": "https://registry.npmjs.org/node-async/-/node-async-0.0.1.tgz"
}
